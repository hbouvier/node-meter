var util    = require('util'),
    cluster = require('cluster'),
    numCPUs = require('os').cpus().length,
    http    = require('./modules/httppost');


(function () {
    var maxRequestPerChannel =  10;
    var maxChannels          =  5000;
    var nbRequestSent        =    0;
    
    // TODO:  Should be read from the 'test script' generated by a proxy
    //
    var getConfig = {
            host: '127.0.0.1',
            port: 8081,
            path: '/ws/display',
            method: 'GET'
            //headers : {'Content-Type' : 'application/json'}
    };

    var totalRequestPorcessedByThisCluster = 0;
    function updateRequestCounter(msg) {
          if (msg.cmd && msg.cmd == 'notifyRequest') {
            totalRequestPorcessedByThisCluster++;
          }
    }

    /////////////////////////////// MASTER ////////////////////////////////
    
    if (cluster.isMaster) {
        var workers = [];
        // Fork workers.
        for (var i = 0; i < numCPUs; i++) {
            var worker = cluster.fork();
            worker.on('message', updateRequestCounter);
            workers.push(worker);
        }
        cluster.on('death', function(worker) {
            util.log('nmeter|master-pid='+process.pid+'|worker-pid=' + worker.pid + '|died|restarting');
            cluster.fork();
        });
        
        setInterval(function() {
            util.log('nmeter|master|channels='+maxChannels+'|totalRequests=' + totalRequestPorcessedByThisCluster);
            if (totalRequestPorcessedByThisCluster > maxChannels * maxRequestPerChannel) {
                util.log('nmeter|master|shuting down');
                for (var w = 0 ; w < workers.length ; ++w)
                    process.kill(workers[w].pid);
                process.kill(process.pid);
            }
        }, 1000);
        return;
    }
    
    /////////////////////////////// WORKER ////////////////////////////////
    var lastStatDisplay = 0;
    var statThreshold = 1000;
    var execTime  = 0;
    var execCount = 0;
    var execInProgress = 0;
    
    function computeStats(err, requestData, userData) {
        var now = new Date().getTime();
        ++execCount;
        execTime += (now - userData.startTime);
        if (now - lastStatDisplay > statThreshold) {
            util.log('nmeter|worker-pid='+process.pid+'|averageExecTime='+parseInt(execTime/execCount)+'ms|inProgress='+execInProgress);
            lastStatDisplay = now;
        }
        --execInProgress
        sendRequest(now);
    }

    function sendRequest(now) {
        if (nbRequestSent > maxChannels * maxRequestPerChannel)
            return;
        ++execInProgress;
        var userData = {
            'startTime':now
        };
        http.post(getConfig, null, userData, computeStats);
        process.send({ cmd: 'notifyRequest' });
    }

    var now = new Date().getTime();
    for (var cpt = 0 ; cpt < maxChannels  / numCPUs; ++cpt) {
        sendRequest(now);
    }
})();
